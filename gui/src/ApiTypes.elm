-- Auto-generated by rust_elm_types

module ApiTypes exposing (FileData, decodeFileData, encodeFileData, LogLevel(..), decodeLogLevel, encodeLogLevel, ToRustMsg(..), decodeToRustMsg, encodeToRustMsg, FromRustMsg(..), decodeFromRustMsg, encodeFromRustMsg)

import Json.Decode
import Json.Decode.Extra
import Json.Decode.Pipeline
import Json.Encode

type alias FileData =
    { filename : String
    , content : String
    }

decodeFileData : Json.Decode.Decoder FileData
decodeFileData =
    Json.Decode.succeed FileData
        |> Json.Decode.Pipeline.required "filename" Json.Decode.string
        |> Json.Decode.Pipeline.required "content" Json.Decode.string

encodeFileData : FileData -> Json.Encode.Value
encodeFileData record =
    Json.Encode.object
        [ ("filename", Json.Encode.string <| record.filename)
        , ("content", Json.Encode.string <| record.content)
        ]

type LogLevel
    = Error
    | Warn
    | Info
    | Debug

decodeLogLevel : Json.Decode.Decoder LogLevel
decodeLogLevel =
    Json.Decode.oneOf
        [ Json.Decode.Extra.when (Json.Decode.field "var" Json.Decode.string) ((==) "Error") <|
            Json.Decode.succeed Error
        , Json.Decode.Extra.when (Json.Decode.field "var" Json.Decode.string) ((==) "Warn") <|
            Json.Decode.succeed Warn
        , Json.Decode.Extra.when (Json.Decode.field "var" Json.Decode.string) ((==) "Info") <|
            Json.Decode.succeed Info
        , Json.Decode.Extra.when (Json.Decode.field "var" Json.Decode.string) ((==) "Debug") <|
            Json.Decode.succeed Debug
        ]

encodeLogLevel : LogLevel -> Json.Encode.Value
encodeLogLevel var =
    case var of
        Error ->
            Json.Encode.object
                [ ( "var", Json.Encode.string "Error" )
                ]
        Warn ->
            Json.Encode.object
                [ ( "var", Json.Encode.string "Warn" )
                ]
        Info ->
            Json.Encode.object
                [ ( "var", Json.Encode.string "Info" )
                ]
        Debug ->
            Json.Encode.object
                [ ( "var", Json.Encode.string "Debug" )
                ]

type alias ToRustMsgLog =
    { level : LogLevel
    , msg : String
    }

decodeToRustMsgLog : Json.Decode.Decoder ToRustMsgLog
decodeToRustMsgLog =
    Json.Decode.succeed ToRustMsgLog
        |> Json.Decode.Pipeline.required "level" decodeLogLevel
        |> Json.Decode.Pipeline.required "msg" Json.Decode.string

type ToRustMsg
    = Log ToRustMsgLog
    | UploadFile FileData

decodeToRustMsg : Json.Decode.Decoder ToRustMsg
decodeToRustMsg =
    Json.Decode.oneOf
        [ Json.Decode.Extra.when (Json.Decode.field "var" Json.Decode.string) ((==) "Log") <|
            Json.Decode.map Log (Json.Decode.field "vardata" <| decodeToRustMsgLog)
        , Json.Decode.Extra.when (Json.Decode.field "var" Json.Decode.string) ((==) "UploadFile") <|
            Json.Decode.map UploadFile (Json.Decode.field "vardata" <| decodeFileData)
        ]

encodeToRustMsg : ToRustMsg -> Json.Encode.Value
encodeToRustMsg var =
    case var of
        Log record ->
            Json.Encode.object
                [ ( "var", Json.Encode.string "Log" )
                , ( "vardata", Json.Encode.object
                    [ ( "level", encodeLogLevel <| record.level )
                    , ( "msg", Json.Encode.string <| record.msg )
                    ] )
                ]
        UploadFile value ->
            Json.Encode.object
                [ ( "var", Json.Encode.string "UploadFile" )
                , ( "vardata", encodeFileData <| value )
                ]

type FromRustMsg
    = Loading
    | EditFile FileData

decodeFromRustMsg : Json.Decode.Decoder FromRustMsg
decodeFromRustMsg =
    Json.Decode.oneOf
        [ Json.Decode.Extra.when (Json.Decode.field "var" Json.Decode.string) ((==) "Loading") <|
            Json.Decode.succeed Loading
        , Json.Decode.Extra.when (Json.Decode.field "var" Json.Decode.string) ((==) "EditFile") <|
            Json.Decode.map EditFile (Json.Decode.field "vardata" <| decodeFileData)
        ]

encodeFromRustMsg : FromRustMsg -> Json.Encode.Value
encodeFromRustMsg var =
    case var of
        Loading ->
            Json.Encode.object
                [ ( "var", Json.Encode.string "Loading" )
                ]
        EditFile value ->
            Json.Encode.object
                [ ( "var", Json.Encode.string "EditFile" )
                , ( "vardata", encodeFileData <| value )
                ]
